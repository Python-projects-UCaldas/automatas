ALIMENTO OVEJA LOBO:

ESTADOS
1 -> (0, 0, 0, 0)
2 -> (0, 0, 0, 1)
3 -> (0, 0, 1, 0)
4 -> (0, 0, 1, 1)
5 -> (0, 1, 0, 0)
6 -> (0, 1, 0, 1)
7 -> (0, 1, 1, 0)
8 -> (0, 1, 1, 1)
9 -> (1, 0, 0, 0)
10 -> (1, 0, 0, 1)
11 -> (1, 0, 1, 0)
12 -> (1, 0, 1, 1)
13 -> (1, 1, 0, 0)
14 -> (1, 1, 0, 1)
15 -> (1, 1, 1, 0)
16 -> (1, 1, 1, 1)

SOLUCIÓN
(0,0,0,0)
(1,0,1,0)
(0,0,1,0)
(1,0,1,1)
(0,0,0,1)
(1,1,0,1)
(0,1,0,1)
(1,1,1,1)

CANIVALES:

ESTADOS
1 -> (0, 0, 0)
2 -> (0, 0, 1)
3 -> (0, 0, 2)
4 -> (0, 0, 3)
5 -> (0, 1, 0)
6 -> (0, 1, 1)
7 -> (0, 1, 2)
8 -> (0, 1, 3)
9 -> (0, 2, 0)
10 -> (0, 2, 1)
11 -> (0, 2, 2)
12 -> (0, 2, 3)
13 -> (0, 3, 0)
14 -> (0, 3, 1)
15 -> (0, 3, 2)
16 -> (0, 3, 3)
17 -> (1, 0, 0)
18 -> (1, 0, 1)
19 -> (1, 0, 2)
20 -> (1, 0, 3)
21 -> (1, 1, 0)
22 -> (1, 1, 1)
23 -> (1, 1, 2)
24 -> (1, 1, 3)
25 -> (1, 2, 0)
26 -> (1, 2, 1)
27 -> (1, 2, 2)
28 -> (1, 2, 3)
29 -> (1, 3, 0)
30 -> (1, 3, 1)
31 -> (1, 3, 2)
32 -> (1, 3, 3)

SOLUCIÓN 
(0,3,3)
(1,3,1)
(0,3,2)
(1,3,0)
(0,3,1)
(1,1,1)
(0,2,2)
(1,0,2)
(0,0,3)
(1,0,1)
(0,0,2)
(1,0,0)

FAMILIA:

ESTADOS
1 -> (0, 0, 0, 0, 0, 0)
2 -> (0, 0, 0, 0, 0, 1)
3 -> (0, 0, 0, 0, 1, 0)
4 -> (0, 0, 0, 0, 1, 1)
5 -> (0, 0, 0, 1, 0, 0)
6 -> (0, 0, 0, 1, 0, 1)
7 -> (0, 0, 0, 1, 1, 0)
8 -> (0, 0, 0, 1, 1, 1)
9 -> (0, 0, 1, 0, 0, 0)
10 -> (0, 0, 1, 0, 0, 1)
11 -> (0, 0, 1, 0, 1, 0)
12 -> (0, 0, 1, 0, 1, 1)
13 -> (0, 0, 1, 1, 0, 0)
14 -> (0, 0, 1, 1, 0, 1)
15 -> (0, 0, 1, 1, 1, 0)
16 -> (0, 0, 1, 1, 1, 1)
17 -> (0, 1, 0, 0, 0, 0)
18 -> (0, 1, 0, 0, 0, 1)
19 -> (0, 1, 0, 0, 1, 0)
20 -> (0, 1, 0, 0, 1, 1)
21 -> (0, 1, 0, 1, 0, 0)
22 -> (0, 1, 0, 1, 0, 1)
23 -> (0, 1, 0, 1, 1, 0)
24 -> (0, 1, 0, 1, 1, 1)
25 -> (0, 1, 1, 0, 0, 0)
26 -> (0, 1, 1, 0, 0, 1)
27 -> (0, 1, 1, 0, 1, 0)
28 -> (0, 1, 1, 0, 1, 1)
29 -> (0, 1, 1, 1, 0, 0)
30 -> (0, 1, 1, 1, 0, 1)
31 -> (0, 1, 1, 1, 1, 0)
32 -> (0, 1, 1, 1, 1, 1)
33 -> (1, 0, 0, 0, 0, 0)
34 -> (1, 0, 0, 0, 0, 1)
35 -> (1, 0, 0, 0, 1, 0)
36 -> (1, 0, 0, 0, 1, 1)
37 -> (1, 0, 0, 1, 0, 0)
38 -> (1, 0, 0, 1, 0, 1)
39 -> (1, 0, 0, 1, 1, 0)
40 -> (1, 0, 0, 1, 1, 1)
41 -> (1, 0, 1, 0, 0, 0)
42 -> (1, 0, 1, 0, 0, 1)
43 -> (1, 0, 1, 0, 1, 0)
44 -> (1, 0, 1, 0, 1, 1)
45 -> (1, 0, 1, 1, 0, 0)
46 -> (1, 0, 1, 1, 0, 1)
47 -> (1, 0, 1, 1, 1, 0)
48 -> (1, 0, 1, 1, 1, 1)
49 -> (1, 1, 0, 0, 0, 0)
50 -> (1, 1, 0, 0, 0, 1)
51 -> (1, 1, 0, 0, 1, 0)
52 -> (1, 1, 0, 0, 1, 1)
53 -> (1, 1, 0, 1, 0, 0)
54 -> (1, 1, 0, 1, 0, 1)
55 -> (1, 1, 0, 1, 1, 0)
56 -> (1, 1, 0, 1, 1, 1)
57 -> (1, 1, 1, 0, 0, 0)
58 -> (1, 1, 1, 0, 0, 1)
59 -> (1, 1, 1, 0, 1, 0)
60 -> (1, 1, 1, 0, 1, 1)
61 -> (1, 1, 1, 1, 0, 0)
62 -> (1, 1, 1, 1, 0, 1)
63 -> (1, 1, 1, 1, 1, 0)
64 -> (1, 1, 1, 1, 1, 1)

SOLUCIÓN
30
(L,N,ON,M,H,A)
(0,0,0,0,0,0),
(1,1,1,0,0,0),
(0,0,1,0,0,0),
(1,0,1,0,1,1),
(0,0,0,0,1,1),
(1,1,0,1,1,1),
(0,0,0,1,1,1),
(1,1,1,1,1,1)

SOLUCIÓN RANAS
(BF5,BF4,BF3,BF2,BF1,V,GF1,GF2,GF3,GF4,GF5)
(BF5,BF4,BF3,BF2,V,BF1,GF1,GF2,GF3,GF4,GF5)
(BF5,BF4,BF3,BF2,GF1,BF1,V,GF2,GF3,GF4,GF5)
(BF5,BF4,BF3,BF2,GF1,BF1,GF2,V,GF3,GF4,GF5)
(BF5,BF4,BF3,BF2,GF1,V,GF2,BF1,GF3,GF4,GF5)
(BF5,BF4,BF3,V,GF1,BF2,GF2,BF1,GF3,GF4,GF5)
(BF5,BF4,V,BF3,GF1,BF2,GF2,BF1,GF3,GF4,GF5)
(BF5,BF4,GF1,BF3,V,BF2,GF2,BF1,GF3,GF4,GF5)
(BF5,BF4,GF1,BF3,GF2,BF2,V,BF1,GF3,GF4,GF5)
(BF5,BF4,GF1,BF3,GF2,BF2,GF3,BF1,V,GF4,GF5)
(BF5,BF4,GF1,BF3,GF2,BF2,GF3,BF1,GF4,V,GF5)
(BF5,BF4,GF1,BF3,GF2,BF2,GF3,V,GF4,BF1,GF5)
(BF5,BF4,GF1,BF3,GF2,V,GF3,BF2,GF4,BF1,GF5)
(BF5,BF4,GF1,V,GF2,BF3,GF3,BF2,GF4,BF1,GF5)
(BF5,V,GF1,BF4,GF2,BF3,GF3,BF2,GF4,BF1,GF5)
(V,BF5,GF1,BF4,GF2,BF3,GF3,BF2,GF4,BF1,GF5)
(GF1,BF5,V,BF4,GF2,BF3,GF3,BF2,GF4,BF1,GF5)
(GF1,BF5,GF2,BF4,V,BF3,GF3,BF2,GF4,BF1,GF5)
(GF1,BF5,GF2,BF4,GF3,BF3,V,BF2,GF4,BF1,GF5)
(GF1,BF5,GF2,BF4,GF3,BF3,GF4,BF2,V,BF1,GF5)
(GF1,BF5,GF2,BF4,GF3,BF3,GF4,BF2,GF5,BF1,V)
(GF1,BF5,GF2,BF4,GF3,BF3,GF4,BF2,GF5,V,BF1)
(GF1,BF5,GF2,BF4,GF3,BF3,GF4,V,GF5,BF2,BF1)
(GF1,BF5,GF2,BF4,GF3,V,GF4,BF3,GF5,BF2,BF1)
(GF1,BF5,GF2,V,GF3,BF4,GF4,BF3,GF5,BF2,BF1)
(GF1,V,GF2,BF5,GF3,BF4,GF4,BF3,GF5,BF2,BF1)
(GF1,GF2,V,BF5,GF3,BF4,GF4,BF3,GF5,BF2,BF1)
(GF1,GF2,GF3,BF5,V,BF4,GF4,BF3,GF5,BF2,BF1)
(GF1,GF2,GF3,BF5,GF4,BF4,V,BF3,GF5,BF2,BF1)
(GF1,GF2,GF3,BF5,GF4,BF4,GF5,BF3,V,BF2,BF1)
(GF1,GF2,GF3,BF5,GF4,BF4,GF5,V,BF3,BF2,BF1)
(GF1,GF2,GF3,BF5,GF4,V,GF5,BF4,BF3,BF2,BF1)
(GF1,GF2,GF3,V,GF4,BF5,GF5,BF4,BF3,BF2,BF1)
(GF1,GF2,GF3,GF4,V,BF5,GF5,BF4,BF3,BF2,BF1)
(GF1,GF2,GF3,GF4,GF5,BF5,V,BF4,BF3,BF2,BF1)
(GF1,GF2,GF3,GF4,GF5,V,BF5,BF4,BF3,BF2,BF1)

############ GENERAR ESTADOS ############
import itertools      
#d ={'1':['BF5','BF4','BF3','BF2','BF1'], '2':['V'], '3':['GF1','GF2','GF3','GF4','GF5']}
d ={'1':[0,1], '2':[0,1], '3':[0,1], '4':[0,1], '5':[0,1], '6':[0,1],}
n = 1
for combo in itertools.product(*[d[k] for k in sorted(d.keys())]):
    print(n,'->', combo)
    n += 1